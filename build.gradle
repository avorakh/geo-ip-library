plugins {
    id 'pl.allegro.tech.build.axion-release' version '1.14.4'
}

scmVersion {
    versionCreator("versionWithBranch")

    hooks {
        pre("fileUpdate", [file: "README.md", pattern: {v,p -> /geo-ip-library: $v/}, replacement: {v, p -> "geo-ip-library: $v"}, encoding: 'utf-8'])
        pre("fileUpdate", [file: 'build.gradle', pattern: {v,p -> /geo-ip-library version: $v/}, replacement: {v, p -> "geo-ip-library version: $v"}, encoding: 'utf-8'])
        pre("commit")
    }
}

group = 'dev.avorakh.geoip'
// geo-ip-library version: 0.1.8

allprojects {
    project.version = scmVersion.version
}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'groovy'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
        compileOnly libs.jetbrains.annotations

        testCompileOnly libs.lombok
        testAnnotationProcessor libs.lombok
        testCompileOnly libs.jetbrains.annotations
    }

    sourceSets {

        integrationTest {
            java {
                srcDirs = ['src/it/java']
            }
            groovy {
                srcDirs = ['src/it/groovy']
            }
            resources {
                srcDirs = ['src/it/resources']
            }
            compileClasspath += main.output 
            runtimeClasspath += main.output
        }
    }
    

    tasks.withType(Test).configureEach {
        // Using JUnitPlatform for running tests
        useJUnitPlatform()
        
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task integrationTest(type: Test) {
        group = 'verification'
        shouldRunAfter(test) 
        
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }


    tasks.named('check') {
        dependsOn(integrationTest)
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime

        compileOnly {
            extendsFrom annotationProcessor
        }
    }
}

wrapper {
    gradleVersion = '7.6'
    distributionType = Wrapper.DistributionType.ALL
}